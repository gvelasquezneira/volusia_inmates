name: Scrape and Deploy Volusia County Inmates

on:
  schedule:
    - cron: "0 0,4,9,13,18,22 * * *" # Every 4.5 hours
  workflow_dispatch:

jobs:
  scrape-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install playwright beautifulsoup4
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install Playwright browsers
        run: |
          python -m playwright install
          python -m playwright install-deps

      - name: Run scraper
        run: python volusia.py

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add volusia_inmates.db
          git commit -m "Update inmate database [skip ci]" || echo "No changes to commit"
          git push https://x:${{ secrets.PAT }}@github.com/gvelasquezneira/volusia_inmates.git || echo "No changes to push"

      - name: Deploy to server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: server326.web-hosting.com
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./
          server-dir: /public_html/scraping/
          protocol: ftp
          port: 21

      - name: Restart Flask service
        uses: appleboy/ssh-action@master
        if: success()
        with:
          host: server326.web-hosting.com
          port: 21098  # Corrected to match the SFTP port provided
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /home/gvelkjyo/public_html/python/scraping/
            echo "Setting up environment..."
            
            # Check which Python is available
            echo "Available Python versions:"
            which python3
            which python
            
            # Try to create virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
              # Try multiple Python paths
              if [ -f "/opt/alt/python311/bin/python3" ]; then
                /opt/alt/python311/bin/python3 -m venv venv
              elif [ -f "/usr/bin/python3" ]; then
                /usr/bin/python3 -m venv venv
              else
                python3 -m venv venv
              fi
              echo "Created new virtual environment"
            fi
            
            # Activate virtual environment
            if [ -f "venv/bin/activate" ]; then
              source venv/bin/activate
              pip install --upgrade pip
              pip install -r requirements.txt
              echo "Dependencies installed"
            else
              echo "WARNING: Virtual environment not found or could not be created"
              # Try to install requirements globally (not ideal but a fallback)
              pip3 install -r requirements.txt
            fi
            
            # Create a more robust passenger_wsgi.py file
            cat > passenger_wsgi.py << 'EOF'
            import sys, os
            
            # More robust virtual environment detection
            VENV_PATH = os.path.join(os.getcwd(), 'venv', 'bin', 'python3')
            SYSTEM_PYTHON = '/opt/alt/python311/bin/python3'
            
            # Only attempt to use the virtual environment if it exists
            if os.path.exists(VENV_PATH) and sys.executable != VENV_PATH:
                try:
                    os.execl(VENV_PATH, VENV_PATH, *sys.argv)
                except:
                    # Fall back to system Python if virtual env fails
                    pass
            
            # Add current directory to path
            sys.path.insert(0, os.getcwd())
            
            try:
                # Try to import from inmates_app.py
                from inmates_app import application
            except ImportError:
                # Fallback if import fails
                from flask import Flask
                application = Flask(__name__)
                
                @application.route('/')
                def index():
                    return "Error: Could not load the main application. Please check server logs."
            EOF
            
            echo "Created robust passenger_wsgi.py file"
            
            # Make sure the database file is in the right location
            if [ -f "volusia_inmates.db" ]; then
              echo "Database file exists"
            else
              echo "WARNING: Database file not found in the current directory"
            fi
            
            # Create necessary directories for templates
            mkdir -p templates
            
            # Restart the application
            mkdir -p tmp
            touch tmp/restart.txt
            echo "Application restarted via tmp/restart.txt"
            
            # Log information about the environment
            echo "Current directory:"
            pwd
            echo "Files in directory:"
            ls -la
            echo "Current Python processes:"
            ps aux | grep python
